/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c OcConfigAdaptor -a occonfigadaptor.h:occonfigadaptor.cpp de.buschmann23.ocNewsEngine.Configuration.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "occonfigadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class OcConfigAdaptor
 */

OcConfigAdaptor::OcConfigAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

OcConfigAdaptor::~OcConfigAdaptor()
{
    // destructor
}

void OcConfigAdaptor::cleanCertificates()
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.cleanCertificates
    QMetaObject::invokeMethod(parent(), "cleanCertificates");
}

void OcConfigAdaptor::cleanDatabase()
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.cleanDatabase
    QMetaObject::invokeMethod(parent(), "cleanDatabase");
}

QVariantMap OcConfigAdaptor::getConfig()
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.getConfig
    QVariantMap config;
    QMetaObject::invokeMethod(parent(), "getConfig", Q_RETURN_ARG(QVariantMap, config));
    return config;
}

QDBusVariant OcConfigAdaptor::getSetting(const QString &entry, const QDBusVariant &defaultValue)
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.getSetting
    QDBusVariant result;
    QMetaObject::invokeMethod(parent(), "getSetting", Q_RETURN_ARG(QDBusVariant, result), Q_ARG(QString, entry), Q_ARG(QDBusVariant, defaultValue));
    return result;
}

QVariantMap OcConfigAdaptor::getStatistics()
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.getStatistics
    QVariantMap stats;
    QMetaObject::invokeMethod(parent(), "getStatistics", Q_RETURN_ARG(QVariantMap, stats));
    return stats;
}

QDBusVariant OcConfigAdaptor::getStat(const int stat)
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.getStat
    QDBusVariant result;
    QMetaObject::invokeMethod(parent(), "getStat", Q_RETURN_ARG(QDBusVariant, result), Q_ARG(int, stat));
    return result;
}

bool OcConfigAdaptor::isAccountEnabled()
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.isAccountEnabled
    bool accountState;
    QMetaObject::invokeMethod(parent(), "isAccountEnabled", Q_RETURN_ARG(bool, accountState));
    return accountState;
}

bool OcConfigAdaptor::isConfigSet()
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.isConfigSet
    bool configStatus;
    QMetaObject::invokeMethod(parent(), "isConfigSet", Q_RETURN_ARG(bool, configStatus));
    return configStatus;
}

void OcConfigAdaptor::resetConfig()
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.resetConfig
    QMetaObject::invokeMethod(parent(), "resetConfig");
}

void OcConfigAdaptor::setSetting(const QString &entry, const QDBusVariant &value)
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.setSetting
    QMetaObject::invokeMethod(parent(), "setSetting", Q_ARG(QString, entry), Q_ARG(QDBusVariant, value));
}

void OcConfigAdaptor::removeAllAccounts()
{
    // handle method call de.buschmann23.ocNewsEngine.Configuration.removeAllAccounts
    QMetaObject::invokeMethod(parent(), "removeAllAccounts");
}

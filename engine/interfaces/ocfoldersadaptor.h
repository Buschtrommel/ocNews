/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c OcFoldersAdaptor -a ocfoldersadaptor.h:ocfoldersadaptor.cpp de.buschmann23.ocNewsEngine.Folders.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef OCFOLDERSADAPTOR_H
#define OCFOLDERSADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface de.buschmann23.ocNewsEngine.Folders
 */
class OcFoldersAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "de.buschmann23.ocNewsEngine.Folders")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"de.buschmann23.ocNewsEngine.Folders\">\n"
"    <method name=\"getFolders\">\n"
"      <annotation value=\"QVariantMap\" name=\"com.trolltech.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"out\" type=\"a{sv}\" name=\"config\"/>\n"
"    </method>\n"
"    <method name=\"requestFolders\"/>\n"
"    <method name=\"createFolder\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
"    </method>\n"
"    <method name=\"deleteFolder\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"renameFolder\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"name\"/>\n"
"    </method>\n"
"    <method name=\"markFolderRead\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <signal name=\"requestedFoldersError\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"requerstresulterror\"/>\n"
"    </signal>\n"
"    <signal name=\"requestedFoldersSuccess\">\n"
"      <arg name=\"updated\" type=\"ai\" direction=\"out\"/>\n"
"      <arg name=\"newFolders\" type=\"ai\" direction=\"out\"/>\n"
"      <arg name=\"deleted\" type=\"ai\" direction=\"out\"/>\n"
"    </signal>\n"
"    <signal name=\"createdFolderError\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"createresulterror\"/>\n"
"    </signal>\n"
"    <signal name=\"createdFolderSuccess\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"foldername\"/>\n"
"      <arg name=\"folderId\" type=\"i\" direction=\"out\" />\n"
"    </signal>\n"
"    <signal name=\"deletedFolderError\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"deleteresulterror\"/>\n"
"    </signal>\n"
"    <signal name=\"deletedFolderSuccess\">\n"
"      <arg name=\"folderId\" type=\"i\" direction=\"out\" />\n"
"    </signal>\n"
"    <signal name=\"renamedFolderError\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"renameresulterror\"/>\n"
"    </signal>\n"
"    <signal name=\"renamedFolderSuccess\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"newfoldername\"/>\n"
"      <arg name=\"folderId\" type=\"i\" direction=\"out\" />\n"
"    </signal>\n"
"    <signal name=\"markedReadFolderError\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"markedreaderror\"/>\n"
"    </signal>\n"
"    <signal name=\"markedReadFolderSuccess\">\n"
"      <arg name=\"folderId\" type=\"i\" direction=\"out\" />\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    OcFoldersAdaptor(QObject *parent);
    virtual ~OcFoldersAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void createFolder(const QString &name);
    void deleteFolder(const QString &id);
    QVariantMap getFolders();
    void markFolderRead(const QString &id);
    void renameFolder(const QString &id, const QString &name);
    void requestFolders();
Q_SIGNALS: // SIGNALS
    void createdFolderError(const QString &createresulterror);
    void createdFolderSuccess(const QString &foldername, const int &folderId);
    void deletedFolderError(const QString &deleteresulterror);
    void deletedFolderSuccess(const int &folderId);
    void markedReadFolderError(const QString &markedreaderror);
    void markedReadFolderSuccess(const int &folderId);
    void renamedFolderError(const QString &renameresulterror);
    void renamedFolderSuccess(const QString &newfoldername, const int &folderId);
    void requestedFoldersError(const QString &requerstresulterror);
    void requestedFoldersSuccess(const QList<int> &updated, const QList<int> &newFolders, const QList<int> &deleted);
};

#endif

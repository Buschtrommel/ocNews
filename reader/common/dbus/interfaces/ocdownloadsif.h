/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c OcDownloadsIf -p ocdownloadsif.h:ocdownloadsif.cpp ../../../../engine/interfaces/de.buschmann23.ocNewsEngine.Downloads.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OCDOWNLOADSIF_H
#define OCDOWNLOADSIF_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface de.buschmann23.ocNewsEngine.Downloads
 */
class OcDownloadsIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "de.buschmann23.ocNewsEngine.Downloads"; }

public:
    OcDownloadsIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OcDownloadsIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> abortDownload(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("abortDownload"), argumentList);
    }

    inline QDBusPendingReply<> append(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("append"), argumentList);
    }

    inline QDBusPendingReply<bool> deleteFile(const QString &link, const QString &mime)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(link) << QVariant::fromValue(mime);
        return asyncCallWithArgumentList(QLatin1String("deleteFile"), argumentList);
    }

    inline QDBusPendingReply<QString> getCurrentItem()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getCurrentItem"), argumentList);
    }

    inline QDBusPendingReply<QString> itemExists(const QString &link, const QString &mime)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(link) << QVariant::fromValue(mime);
        return asyncCallWithArgumentList(QLatin1String("itemExists"), argumentList);
    }

    inline QDBusPendingReply<bool> itemInQueue(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("itemInQueue"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void enqueued(const QString &enqueuedId);
    void finished();
    void finishedFile(const QString &finishedFileId);
    void progress(int rec, int tot);
    void started(const QString &startedFileId);
};

namespace de {
  namespace buschmann23 {
    namespace ocNewsEngine {
      typedef ::OcDownloadsIf Downloads;
    }
  }
}
#endif

/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c OcFeedsIf -p ocfeedsif.h:ocfeedsif.cpp ../../ocNewsEngine/interfaces/de.buschmann23.ocNewsEngine.Feeds.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OCFEEDSIF_H
#define OCFEEDSIF_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface de.buschmann23.ocNewsEngine.Feeds
 */
class OcFeedsIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "de.buschmann23.ocNewsEngine.Feeds"; }

public:
    OcFeedsIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OcFeedsIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> createFeed(const QString &url, const QString &folderId, bool eventView)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(url) << QVariant::fromValue(folderId) << QVariant::fromValue(eventView);
        return asyncCallWithArgumentList(QLatin1String("createFeed"), argumentList);
    }

    inline QDBusPendingReply<> deleteFeed(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("deleteFeed"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> getFeeds()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getFeeds"), argumentList);
    }

    inline QDBusPendingReply<> markFeedRead(const QString &feedId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(feedId);
        return asyncCallWithArgumentList(QLatin1String("markFeedRead"), argumentList);
    }

    inline QDBusPendingReply<> moveFeed(const QString &id, const QString &folderId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(folderId);
        return asyncCallWithArgumentList(QLatin1String("moveFeed"), argumentList);
    }

    inline QDBusPendingReply<> requestFeeds()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("requestFeeds"), argumentList);
    }

    inline QDBusPendingReply<> renameFeed(const QString &id, const QString &newName)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(newName);
        return asyncCallWithArgumentList(QLatin1String("renameFeed"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void createdFeedError(const QString &createFeedResultError);
    void createdFeedSuccess(const QString &feedname, const int &feedId);
    void deletedFeedError(const QString &deleteFeedResultError);
    void deletedFeedSuccess(const int &id);
    void markedReadFeedError(const QString &markedReadFeedErrorResult);
    void markedReadFeedSuccess(const int &feedId);
    void movedFeedError(const QString &moveFeedResultError);
    void movedFeedSuccess(const int &feedId, const int &folderId);
    void requestedFeedsError(const QString &requestedFeedsErrorString);
    void requestedFeedsSuccess(const QList<int> &updated, const QList<int> &newFeeds, const QList<int> &deleted);
    void renamedFeedSuccess(const QString &newName);
    void renamedFeedError(const QString &renamedFeedErrorString);
};

namespace de {
  namespace buschmann23 {
    namespace ocNewsEngine {
      typedef ::OcFeedsIf Feeds;
    }
  }
}
#endif
